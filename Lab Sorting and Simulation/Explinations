Exercise 2:
	In the above cases, all the sorting objects are created using IntegerComparator1. 
	Change it to IntegerComparator2 in those three cases and run again. Any difference 
	in the final sorted output? Explain why. 
			public int compare(Integer o1, Integer o2) {
				return o2 - o1;
			}
			public int compare(Integer o1, Integer o2) {
				return o1 - o2;
			}
			
			Here the comparators' signs are opposite from each other therefore 
			the sorting is going to be opposite.
